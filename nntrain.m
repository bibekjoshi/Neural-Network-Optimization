function [net,tr] = nntrain(X,y,h)
    % Solve an Input-Output Fitting problem with a Neural Network
    % Script generated by Neural Fitting app
    % Created 04-Apr-2016 19:47:30
    %
    % This script assumes these variables are defined:
    %
    %   X - input data.
    %   y - target data.
    %   h - row ector for hidden layer architecture: columns represent hidden layer and 
            %values represent number of neurons in the hidden layer

    x = X';
    t = y';

    % Choose a Training Function
    % For a list of all training functions type: help nntrain
    % 'trainlm' is usually fastest.
    % 'trainbr' takes longer but may be better for challenging problems.
    % 'trainscg' uses less memory. Suitable in low memory situations.
    trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.
    
    % Create a Fitting Network
    hiddenLayerSize = h;
    net = fitnet(hiddenLayerSize,trainFcn);
    
    % Choose Input and Output Pre/Post-Processing Functions
    % For a list of all processing functions type: help nnprocess
    net.input.processFcns = {'removeconstantrows','mapminmax'};
    net.output.processFcns = {'removeconstantrows','mapminmax'};

    % Setup Division of Data for Training, Validation, Testing
    % For a list of all data division functions type: help nndivide
    net.divideFcn = 'dividerand';  % Divide data randomly
    net.divideMode = 'sample';  % Divide up every sample
    net.divideParam.trainRatio = 60/100;
    net.divideParam.valRatio = 40/100;
    net.divideParam.testRatio = 0/100;
    
    %Define performance function for optimizing the model
    net.performFcn = 'mse'; %Mean squared error as the performance function
    
    %set up training parameters momentum decrease rate, momentum increase
    %rate, momentum and number of subsequent iterations to validate minimum
    %performance as training stopping criteria
    net.trainParam.mu_dec = 0.1;
    net.trainParam.mu_inc = 10;
    net.trainParam.mu = 1e-3;
    net.trainParam.max_fail = 6;
    % Train the Network
    [net,tr] = train(net,x,t);

    % Test the Network
%      y = net(x);
%      e = gsubtract(t,y);
%      performance = perform(net,t,y);

    % View the Network
    % view(net)

    % Plots
    % Uncomment these lines to enable various plots.
    %figure, plotperform(tr)
    %figure, plottrainstate(tr)
    %figure, ploterrhist(e)
%     figure, plotregression(t,y)
    %figure, plotfit(net,x,t)
end
